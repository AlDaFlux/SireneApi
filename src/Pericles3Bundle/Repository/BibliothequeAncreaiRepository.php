<?php

namespace Pericles3Bundle\Repository;
use Pericles3Bundle\Entity\ReferentielPublic;


/**
 * BibliothequeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BibliothequeAncreaiRepository extends \Doctrine\ORM\EntityRepository
{


	public function findLast($limit=5)
	{
            
            $qb = $this->createQueryBuilder('ba');
            if ($limit) { $qb->setMaxResults($limit); }
            $qb->orderBy("ba.dateUpdate","DESC");
            return $qb->getQuery()->getResult();
	}

	public function findPdf()
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->where("ba.href LIKE '%.pdf'");    
            return $qb->getQuery()->getResult();
	}

	public function findPdfSansCache($limit=15)
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->where("ba.href LIKE '%.pdf' AND ba.cache IS NULL ");    
            $qb->andWhere('ba.codeRetour = 200');
            if ($limit)
            {
                $qb->setMaxResults($limit);
            }
            return $qb->getQuery()->getResult();
	}

	public function findSansCache()
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->where("ba.cache ='' ");    
            return $qb->getQuery()->getResult();
	}
        
         
	public function findCodeRetour($codeRetour)
	{
            
            $qb = $this->createQueryBuilder('ba');
            $qb->where('ba.codeRetour = :code_ret');
            $qb->setParameter('code_ret', $codeRetour);    
            return $qb->getQuery()->getResult();
	}
        
        
	public function findLienARefaire($limit=0)
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->where('ba.codeRetour <> 200');
            if ($limit)
            {
                $qb->setMaxResults($limit);
            }
            return $qb->getQuery()->getResult();
	}
        
        
        
	public function findByReferentielPublic(ReferentielPublic $ReferentielPublic, $limit=0)
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->Join('ba.referentielPublics', 'referentielPublics');
            $qb->where('referentielPublics.id = :id_referentiel');
            $qb->setParameter('id_referentiel', $ReferentielPublic->getId());               
            if ($limit)
            {
                $qb->setMaxResults($limit);
            }
            return $qb->getQuery()->getResult();
	}


        public function findByReferentielPublicArray(ReferentielPublic $ReferentielPublic, $limit=0)
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->select('ba.dateCreate','ba.datePublication','ba.id','ba.titre','ba.href');
            $qb->Join('ba.referentielPublics', 'referentielPublics');
            $qb->where('referentielPublics.id = :id_referentiel');
            $qb->setParameter('id_referentiel', $ReferentielPublic->getId());               
            return $qb->getQuery()->getResult();
	}

            
        
	public function findByUserGestionnaire(\Pericles3Bundle\Entity\User $User, $limit=0)
	{
                $qb = $this->createQueryBuilder('ba');
                $qb->Join('ba.referentielPublics', 'referentielPublics');
                $qb->Join('referentielPublics.etablissements', 'etablissement');
                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->where('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->where("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
                if ($limit)
                {
                    $qb->setMaxResults($limit);
                }
                 return $qb->getQuery()->getResult();
 	}

        
        
	public function findBySourceGestionnaire(\Pericles3Bundle\Entity\User $User,$BibliothequeAncreaiTypeSource)
	{
                $qb = $this->createQueryBuilder('ba');
                $qb->Join('ba.referentielPublics', 'referentielPublics');
                $qb->Join('referentielPublics.etablissements', 'etablissement');
                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->where('ba.typeSourceBA= :source AND userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->where("ba.typeSourceBA= :source AND etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
                $qb->setParameter('source', $BibliothequeAncreaiTypeSource);               
		return $qb->getQuery()->getResult();
	}
        

        public function findByReferentielPublicRbppCountRef(ReferentielPublic $ReferentielPublic, $limit=0)
	{
            $qb = $this->createQueryBuilder('biblioaancreai');
            $qb->select('biblioaancreai.dateCreate','biblioaancreai.datePublication','biblioaancreai.id','biblioaancreai.titre','biblioaancreai.href','COUNT(Criterereferentiel) as NbRef');
            $qb->Join('biblioaancreai.Criterereferentiel', 'Criterereferentiel');
            $qb->Join('Criterereferentiel.ReferentielPublic', 'CritereReferentielPublic');
//            $qb->where('refPublics.id = :id_referentiel');
            $qb->Where('(CritereReferentielPublic.id = :id_referentiel)');
            $qb->setParameter('id_referentiel', $ReferentielPublic->getId());               
            $qb->GroupBy('biblioaancreai.dateCreate','biblioaancreai.datePublication','biblioaancreai.id','biblioaancreai.titre','biblioaancreai.href');               
            if ($limit)
            {
                $qb->setMaxResults($limit);
            }
            return $qb->getQuery()->getResult();
	}


        public function findByReferentielPublicRbppWRef(ReferentielPublic $ReferentielPublic, $limit=0)
	{
            $qb = $this->createQueryBuilder('biblioaancreai');
            $qb->select('DISTINCT biblioaancreai');
            $qb->Join('biblioaancreai.referentielPublics', 'referentielPublics');
            $qb->Join('biblioaancreai.typeSourceBA', 'typeSourceBA');
            $qb->LeftJoin('biblioaancreai.Criterereferentiel', 'Criterereferentiel');
            $qb->LeftJoin('Criterereferentiel.ReferentielPublic', 'CritereReferentielPublic');
            $qb->where('referentielPublics.id = :id_referentiel');
            $qb->AndWhere('CritereReferentielPublic.id = :id_referentiel  or  CritereReferentielPublic.id  IS NULL');
           // $qb->AndWhere('typeSourceBA.id = 1'); // rbpp

            $qb->orderBy("biblioaancreai.datePublication","DESC");
            
            $qb->setParameter('id_referentiel', $ReferentielPublic->getId());               
            if ($limit)
            {
                $qb->setMaxResults($limit);
            }
            return $qb->getQuery()->getResult();
	}

        
	public function findByReferentielNotPublic(ReferentielPublic $ReferentielPublic, $limit=0)
	{
            $qb = $this->createQueryBuilder('ba');
            $qb->where(':RefPublic NOT MEMBER OF ba.referentielPublics')
                ->setParameter('RefPublic', $ReferentielPublic);
            return $qb->getQuery()->getResult();
	}

        
        
	public function findByReferentielPublicSource(ReferentielPublic $ReferentielPublic,$BibliothequeAncreaiTypeSource)
	{
                $qb = $this->createQueryBuilder('ba');
                $qb->Join('ba.referentielPublics', 'referentielPublics');
//                $qb->Join('ba.typeSourceBA', 'typeSourceBA');
                $qb->where('referentielPublics.id = :id_referentiel AND ba.typeSourceBA= :source');
//                $qb->where('referentielPublics.id = :id_referentiel AND ba.type_source_ba_id=1');
                $qb->setParameter('id_referentiel', $ReferentielPublic);               
                $qb->setParameter('source', $BibliothequeAncreaiTypeSource);               
		return $qb->getQuery()->getResult();
	}
        
        
        
           
        public function FindByReferentielOccurence($referentiel,$occurence) 
        {
            $qb = $this->createQueryBuilder('ba');
            $qb->select(array('ba.titre as lib','ba.id as id','\'pericles3_bibliotheque_ancreai_show\' as path'));
            $qb->Join('ba.referentielPublics', 'public');
            $qb->where("ba.titre LIKE :occurence  AND public.id = :referentiel_id")->setParameter('referentiel_id', $referentiel->getId())->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(25);
            return $qb->getQuery()->getResult();
        }
        
        
        
        
	public function findAnesm()
	{
                $qb = $this->createQueryBuilder('ba');
                $qb->where("ba.href LIKE :occurence  ")->setParameter('occurence',"%anesm%");
		return $qb->getQuery()->getResult();
	}
        
        
}


