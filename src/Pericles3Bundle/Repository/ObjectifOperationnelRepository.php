<?php

namespace Pericles3Bundle\Repository;
use Pericles3Bundle\Entity\Etablissement;
use Pericles3Bundle\Entity\Gestionnaire;


/**
 * FicheActionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObjectifOperationnelRepository extends \Doctrine\ORM\EntityRepository
{
    	public function findByEtablissement(Etablissement $etablissement, $orderBy = null,$completed='') 
        {
                $qb = $this->createQueryBuilder('ooa');
//		$qb->leftJoin('ooa.criteres', 'critere');
                if ($completed=="finis") { $qb->where('ooa.etablissement = :etablissement_id AND  ooa.complete = 100'); }
                elseif ($completed=="encours") { $qb->where('ooa.etablissement = :etablissement_id AND  ooa.complete <100'); }
                else { $qb->where('ooa.etablissement = :etablissement_id');}
                $qb->setParameter('etablissement_id', $etablissement->getId());
                /*
		if (isset($orderBy))
			$qb->orderBy($orderBy);
		else {
			$qb->orderBy('referentielDomaine.ordre, referentielDimension.ordre, referentielCritere.ordre');
		}
                 */
		return $qb->getQuery()->getResult();
	}
        
        
               
        public function findByGestionnaire(\Pericles3Bundle\Entity\User $User, $orderBy = null,$completed='') 
        {
                $qb = $this->createQueryBuilder('ooa');
                $qb->Join('ooa.etablissement', 'etablissement');
                $qb->Join('etablissement.gestionnaire', 'gestionnaire');
 
                
                if ($completed=="finis") { $whereand='  AND  ooa.complete = 100'; }
                elseif ($completed=="encours") { $whereand = ' AND  ooa.complete <100'; }
                else $whereand="";

                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->where('userPole.id = :user_id'.$whereand)->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->where("etablissement.gestionnaire = :gestionnaire_id".$whereand)->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
 
//                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
		return $qb->getQuery()->getResult();
	}
        
        
         
    	public function findImportantes(Etablissement $etablissement,$limit=5) 
        {
                $qb = $this->createQueryBuilder('ooa');
               	$qb->where('ooa.etablissement = :etablissement_id');
                $qb->setParameter('etablissement_id', $etablissement->getId());
                $qb->setMaxResults($limit);
                $qb->orderBy('ooa.complete');
		return $qb->getQuery()->getResult();
	}
              
    	public function findDerniers(Etablissement $etablissement,$limit=5) 
        {
                $qb = $this->createQueryBuilder('ooa');
               	$qb->where('ooa.etablissement = :etablissement_id');
                $qb->setParameter('etablissement_id', $etablissement->getId());
                $qb->setMaxResults($limit);
                $qb->orderBy('ooa.dateCreate','DESC');
		return $qb->getQuery()->getResult();
	}
     
    	public function findOrphans(Etablissement $etablissement) 
        {
                $qb = $this->createQueryBuilder('ooa');
                $qb->leftJoin('ooa.criteres', 'critere');
               	$qb->where('ooa.etablissement = :etablissement_id AND critere.id IS NULL');
                $qb->setParameter('etablissement_id', $etablissement->getId());
                $qb->orderBy('ooa.dateFin');
		return $qb->getQuery()->getResult();
	}
     
       
             
        public function findByCritere($id_critere) 
        {
                $qb = $this->createQueryBuilder('ooa');
		$qb->Join('ooa.criteres', 'criteres');
               	$qb->where('criteres.id= :critere_id');
                $qb->setParameter('critere_id', $id_critere);
//                $qb->distinct();
		return $qb->getQuery()->getResult();
	}

         
        public function findByCritereRefGestionnaire(\Pericles3Bundle\Entity\User $User, \Pericles3Bundle\Entity\Referentiel $referentiel) 
        {
                $qb = $this->createQueryBuilder('ooa');
		$qb->Join('ooa.criteres', 'criteres');
		$qb->Join('criteres.referentiel', 'referentiel');
		$qb->Join('ooa.etablissement', 'etablissement');
               	$qb->where('referentiel.id = '.$referentiel->getId());
//                $qb->setParameter('referentiel_critere_id', );
//                $qb->distinct();
                
           
                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->Andwhere('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->Andwhere("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
              
		return $qb->getQuery()->getResult();
	}

              

        function AddWhereUser($qb,\Pericles3Bundle\Entity\User $User)
        {
                if ($User->IsAnEtablissement())
                {
                    $qb->Where("etablissement.id = :etab_id")->setParameter('etab_id', $User->getEtablissement()->getId());
                }
                else
                {
                    if ($User->getIsAdminPole())
                      {
                          $qb->Join('etablissement.userPole', 'userPole');
                          $qb->Andwhere('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                      }
                      else
                      {
                          $qb->Andwhere("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                      }
                }
            
        }
        
        public function findByPriorite(\Pericles3Bundle\Entity\User $User, $priorite) 
        {
                $qb = $this->createQueryBuilder('ooa');
		$qb->Join('ooa.etablissement', 'etablissement');
                $this->AddWhereUser($qb,$User);
                $qb->Andwhere('ooa.priorite = :opriorite')->setParameter('opriorite', $priorite);
		return $qb->getQuery()->getResult();
	}
        
        
        public function findSansDate(\Pericles3Bundle\Entity\User $User) 
        {
                $qb = $this->createQueryBuilder('ooa');
		$qb->Join('ooa.etablissement', 'etablissement');
                $this->AddWhereUser($qb,$User);
                $qb->AndWhere('ooa.dateDebut IS NULL or ooa.dateFin IS NULL');
		return $qb->getQuery()->getResult();
	}
        
        public function findEnRetard(\Pericles3Bundle\Entity\User $User) 
        {
                $qb = $this->createQueryBuilder('ooa');
		$qb->Join('ooa.etablissement', 'etablissement');
                $this->AddWhereUser($qb,$User);
                $qb->AndWhere("ooa.dateFin < '".date('Y-m-d')."' AND ooa.complete<100");
		return $qb->getQuery()->getResult();
	}
        
        

        
        
        
        
        
        
        
        
        
        
        
        
         
        public function findDomaine(Etablissement $etablissement,$id) 
        {
                $qb = $this->createQueryBuilder('ooa');
		$qb->Join('ooa.criteres', 'criteres');
		$qb->Join('criteres.dimension', 'dimension');
                $qb->where('dimension.domaine='.$id); 
                $qb->distinct();
 
		return $qb->getQuery()->getResult();
	}

           
        public function FindByEtablissementOccurence($etablissement,$occurence) 
        {
            $qb = $this->createQueryBuilder('oaa');
            $qb->select(array('oaa.commentaire as lib','oaa.id as id','\'paq_oaa_show\' as path'));
            $qb->Join('oaa.domaine', 'domaines');
            $qb->where("oaa.commentaire LIKE :occurence  AND domaines.etablissement = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId())->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(25);
            return $qb->getQuery()->getResult();
        }
        
        
        
        public function FindReferentielDesuet() 
        {
            $qb = $this->createQueryBuilder('ooa');
            $qb->Join('ooa.etablissement', 'ooa_etablissement');
            $qb->Join('ooa_etablissement.referentielPublic', 'ooa_referentielPublic');
            $qb->Join('ooa.criteres', 'criteres');
            $qb->Join('criteres.referentiel', 'critere_referentiel');
            $qb->Join('critere_referentiel.ReferentielPublic', 'critere_referentielPublic');
            $qb->where("critere_referentielPublic.id <> ooa_referentielPublic.id");
            return $qb->getQuery()->getResult();
        }
        

        
}
