<?php

namespace Pericles3Bundle\Repository;

/**
 * ConstatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConstatRepository extends \Doctrine\ORM\EntityRepository
{
    
    
    
            public function findByCritereRefGestionnaire(\Pericles3Bundle\Entity\User $User, \Pericles3Bundle\Entity\Referentiel $referentiel) 
        {
                $qb = $this->createQueryBuilder('constats');
		$qb->Join('constats.critere', 'criteres');
		$qb->Join('criteres.dimension', 'dimensions');
		$qb->Join('dimensions.domaine', 'domaine');
		$qb->Join('criteres.referentiel', 'referentiel');
		$qb->Join('domaine.etablissement', 'etablissement');
               	$qb->where('referentiel.id = '.$referentiel->getId());
                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->Andwhere('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->Andwhere("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
              
		return $qb->getQuery()->getResult();
	}

        public function FindReferentielDesuet(\Pericles3Bundle\Entity\Etablissement $etablissement = null) 
        {
            $qb = $this->createQueryBuilder('constats');
            $qb->Join('constats.critere', 'criteres');
            $qb->Join('criteres.referentiel', 'critere_referentiel');
            $qb->Join('critere_referentiel.ReferentielPublic', 'critere_referentielPublic');
            $qb->Join('criteres.dimension', 'dimension');
            $qb->Join('dimension.domaine', 'domaine');
            $qb->Join('domaine.etablissement', 'etablissement');
            $qb->Join('etablissement.referentielPublic', 'referentielPublicReel');
            $qb->where("critere_referentielPublic.id <> referentielPublicReel.id");
            
            if ($etablissement) $qb->Andwhere('etablissement.id = :etab_id')->setParameter('etab_id', $etablissement->getId());

            return $qb->getQuery()->getResult();
        }
        
        
        public function FindReferentielDesuetEtablissementPatch(\Pericles3Bundle\Entity\Etablissement $etablissement, \Pericles3Bundle\Entity\Patch $patch) 
        {
            
            $qb = $this->createQueryBuilder('constats');
            
            $qb->Join('constats.critere', 'criteres');
            $qb->Join('criteres.referentiel', 'critere_referentiel');
            $qb->Join('criteres.dimension', 'dimensions');
            $qb->Join('dimensions.domaine', 'domaine');
            $qb->Join('criteres.referentiel', 'referentiel');
            $qb->Join('referentiel.patchSources', 'patchSources');
            $qb->Join('patchSources.patch', 'patch');
            $qb->Join('domaine.etablissement', 'etablissement');
            $qb->Andwhere('etablissement.id = :etab_id')->setParameter('etab_id', $etablissement->getId());
            $qb->Andwhere('patch.id = :patch_id')->setParameter('patch_id', $patch->getId());
            $qb->Andwhere('patchSources.patcheRefCible IS NULL');
             return $qb->getQuery()->getResult();
        }

        
        

}
