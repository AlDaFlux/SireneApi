<?php

namespace Pericles3Bundle\Repository;

use Pericles3Bundle\Entity\Domaine;
use Pericles3Bundle\Entity\Gestionnaire;


/**
 * PreuveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreuveRepository extends \Doctrine\ORM\EntityRepository
{
    
    	public function findByDomaine(Domaine $Domaine) 
        {
                $qb = $this->createQueryBuilder('preuves');
		$qb->Join('preuves.critere', 'critere');
		$qb->Join('critere.dimension', 'dimension');
                $qb->where('dimension.domaine= :domaine_id')->setParameter('domaine_id', $Domaine->getId());
		return $qb->getQuery()->getResult();
	}
        
        
        public function FindNbFileNamebyEtablissement($etablissement,$filename) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->Join('preuve.etablissement', 'etablissement');
            $qb->select('count(preuve.id)');
//            $qb->select(array('preuve.commentaire as lib','preuve.id as id','\'pericles3_bibliotheque_preuve_show\' as path'));
            $qb->where("preuve.fichier = :flname AND etablissement.id = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId())->setParameter('flname',$filename);
  //          $qb->where("etablissement.id = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId());
            return($qb->getQuery()->getSingleScalarResult());
        }
        
        
        /*
         * 
        
	public function findBySourceGestionnaire(\Pericles3Bundle\Entity\User $User,$BibliothequeAncreaiTypeSource)
	{
                $qb = $this->createQueryBuilder('ba');
                $qb->Join('ba.referentielPublics', 'referentielPublics');
             
                $qb->setParameter('source', $BibliothequeAncreaiTypeSource);               
		return $qb->getQuery()->getResult();
	}
        
         */
        public function findByGestionnaire(\Pericles3Bundle\Entity\User $User,$limit=5) 
        {
                $qb = $this->createQueryBuilder('preuves');
                $qb->select('DISTINCT preuves');
                $qb->Join('preuves.etablissement', 'etablissement');
                   
                if ($User->getIsAdminPole())
                {
                    $qb->Join('etablissement.userPole', 'userPole');
                    $qb->where('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                }
                else
                {
                    $qb->where("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                }
                if ($limit) $qb->setMaxResults($limit);
		return $qb->getQuery()->getResult();
	}
        
        public function findAllFichier() 
        {
                $qb = $this->createQueryBuilder('preuves');
                $qb->where("preuves.fichier<>'' ");
		return $qb->getQuery()->getResult();
	}
        
        
        
        
        public function findByGestionnaireType(\Pericles3Bundle\Entity\User $User,$type_preuves,$limit=5) 
        {
                $qb = $this->createQueryBuilder('preuves');
		$qb->Join('preuves.etablissement', 'etablissement');
                   
                if ($User->getIsAdminPole())
                {
                    $qb->Join('etablissement.userPole', 'userPole');
                    $qb->where('preuves.type_preuve = :tpe_preuve AND userPole.id = :user_id')->setParameter('user_id', $User->getId());
                }
                else
                {
                    $qb->where("preuves.type_preuve = :tpe_preuve AND etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                }
                
                
                $qb->setParameter('tpe_preuve', $type_preuves);
                if ($limit) $qb->setMaxResults($limit);
//		$qb->Join('critere.dimension', 'dimension');
//                $qb->where('dimension.domaine= :domaine_id')->setParameter('domaine_id', $Domaine->getId());
             //   $qb->orderBy('dateCreate DESC');
		return $qb->getQuery()->getResult();
	}
        
        
        

        public function findByGestionnairePDV(\Pericles3Bundle\Entity\User $User, \Pericles3Bundle\Entity\Referentiel $referentiel, $limit=0) 
        {
            
                $qb = $this->createQueryBuilder('preuves');
		$qb->Join('preuves.etablissement', 'etablissement');
                $qb->Join('preuves.domaine', 'domaine');
                $qb->Join('domaine.referentiel', 'referentiel');

                if ($User->getIsAdminPole())
                {
                    $qb->Join('etablissement.userPole', 'userPole');
                    $qb->where('preuves.type_preuve = :tpe_preuve AND userPole.id = :user_id')->setParameter('user_id', $User->getId());
                }
                else
                {
                    $qb->where("preuves.type_preuve = :tpe_preuve AND etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                }
                $qb->setParameter('tpe_preuve', "pdv");
                $qb->AndWhere('referentiel.id = :ref_id')->setParameter('ref_id', $referentiel->getId());
                if ($limit) $qb->setMaxResults($limit);
		return $qb->getQuery()->getResult();
	}
        
        

        public function findByGestionnaireCritere(\Pericles3Bundle\Entity\User $User, \Pericles3Bundle\Entity\Referentiel $referentiel,$limit=0) 
        {
                $qb = $this->createQueryBuilder('preuves');
		$qb->Join('preuves.etablissement', 'etablissement');
                $qb->Join('preuves.critere', 'critere');
                $qb->Join('critere.referentiel', 'referentiel');
                if ($User->getIsAdminPole())
                {
                    $qb->Join('etablissement.userPole', 'userPole');
                    $qb->where('preuves.type_preuve = :tpe_preuve AND userPole.id = :user_id')->setParameter('user_id', $User->getId());
                }
                else
                {
                    $qb->where("preuves.type_preuve = :tpe_preuve AND etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                }
                $qb->setParameter('tpe_preuve',"critere");
                $qb->AndWhere('referentiel.id = :ref_id')->setParameter('ref_id', $referentiel->getId());
                if ($limit) $qb->setMaxResults($limit);
		return $qb->getQuery()->getResult();
	}
        
        
        
        
        
        
        
                 
        public function FindByEtablissementOccurence($etablissement,$occurence) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->Join('preuve.etablissement', 'etablissement');
            $qb->select(array('preuve.commentaire as lib','preuve.id as id','\'pericles3_bibliotheque_preuve_show\' as path'));
            $qb->where("preuve.commentaire LIKE :occurence  AND etablissement.id = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId())->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(25);
            return $qb->getQuery()->getResult();
        }
        
        
        
        public function FindByEtablissementOccurencePdv($etablissement,$occurence) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->select(array('preuve.commentaire as lib','domaines.id as id','\'pericles3_domaine\' as path','\'pdv\' as ancre'));
            $qb->Join('preuve.domaine', 'domaines');
            $qb->where("preuve.type_preuve = 'pdv' AND preuve.commentaire LIKE :occurence  AND domaines.etablissement = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId())->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(25);
            return $qb->getQuery()->getResult();
        }
        
        
        
        public function FindReferentielDesuet() 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->Join('preuve.etablissement', 'preuve_etablissement');
            $qb->Join('preuve_etablissement.referentielPublic', 'preuve_referentielPublic');
            $qb->Join('preuve.critere', 'criteres');
            $qb->Join('criteres.referentiel', 'critere_referentiel');
            $qb->Join('critere_referentiel.ReferentielPublic', 'critere_referentielPublic');
            $qb->where("critere_referentielPublic.id <> preuve_referentielPublic.id");
            return $qb->getQuery()->getResult();
        }
        
        
        
        
        
        
                 
        public function findFichiersEtablissement($etablissement) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->Select('preuve.fichier, count(preuve.fichier) as nb');
            $qb->Join('preuve.etablissement', 'etablissement');
            $qb->GroupBy('preuve.fichier');
            $qb->where("etablissement.id = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId());
            $qb->andWhere("preuve.fichier <> ''");
            return $qb->getQuery()->getResult();
        }
        
        
          /*       
        public function findFichiersEtablissementSansBiblio($etablissement) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->Select('preuve.fichier, count(preuve.fichier) as nb');
            $qb->Join('preuve.etablissement', 'etablissement');
            $qb->GroupBy('preuve.fichier');
            $qb->where("etablissement.id = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId());
            $qb->andWhere("preuve.fichier <> ''");
            return $qb->getQuery()->getResult();
        }
        */
                 
        public function findFichiersByNameEtablissement($filename, $etablissement) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->Join('preuve.etablissement', 'etablissement');
            $qb->where("etablissement.id = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId());
            $qb->andWhere("preuve.fichier = :filen ")->setParameter('filen', $filename);
            return $qb->getQuery()->getResult();
        }
        
                 
        public function findFichiersByName($filename) 
        {
            $qb = $this->createQueryBuilder('preuve');
            $qb->where("preuve.fichier = :filen ")->setParameter('filen', $filename);
            return $qb->getQuery()->getResult();
        }
        
              
     
        public function FindReferentielDesuetEtablissementPatch(\Pericles3Bundle\Entity\Etablissement $etablissement, \Pericles3Bundle\Entity\Patch $patch) 
        {
            $qb = $this->createQueryBuilder('preuves');
            $qb->Join('preuves.critere', 'criteres');
            $qb->Join('criteres.referentiel', 'critere_referentiel');
            $qb->Join('criteres.dimension', 'dimensions');
            $qb->Join('dimensions.domaine', 'domaine');
            $qb->Join('criteres.referentiel', 'referentiel');
            $qb->Join('referentiel.patchSources', 'patchSources');
            $qb->Join('patchSources.patch', 'patch');
            $qb->Join('domaine.etablissement', 'etablissement');
            $qb->Andwhere('preuves.bibliotheque IS NULL');
            $qb->Andwhere('etablissement.id = :etab_id')->setParameter('etab_id', $etablissement->getId());
            $qb->Andwhere('patch.id = :patch_id')->setParameter('patch_id', $patch->getId());
            $qb->Andwhere('patchSources.patcheRefCible IS NULL');
             return $qb->getQuery()->getResult();
        }

}
