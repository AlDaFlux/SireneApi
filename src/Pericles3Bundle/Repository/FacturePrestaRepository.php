<?php

namespace Pericles3Bundle\Repository;

/**
 * ConstatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FacturePrestaRepository extends \Doctrine\ORM\EntityRepository
{
    
    
	public function findLast($limit=5)
	{
            
            $qb = $this->createQueryBuilder('ba');
            if ($limit) { $qb->setMaxResults($limit); }
            $qb->orderBy("ba.id","ASC");
            return $qb->getQuery()->getResult();
	}
        
        
    	public function findSommePayee() 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facture.facturePrestas', 'facture');
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->where("facture.payele IS NOT NULL"); 
            return $qb->getQuery()->getOneOrNullResult();
	}   
        
        
        
    	public function findSomme($payee=null,$renouvellement=null) 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->Where("facture.finalise=1"); 
            if (! is_null($payee))
            {
                if ($payee) $qb->AndWhere("facture.payele IS NOT NULL"); 
                else $qb->AndWhere("facture.payele IS NULL"); 
            }
            if (! is_null($renouvellement))
            {
                if ($renouvellement) $qb->AndWhere("facturePrestas.renouvellement = 1"); 
                else $qb->AndWhere(" facturePrestas.renouvellement = 0"); 
            }
            return $qb->getQuery()->getOneOrNullResult();
	}
        

        
    	public function findSommeStillDate($dateFin,$payee=null,$renouvellement=null) 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->Where("facture.finalise=1 and facture.dateEmission < '".$dateFin->format('Y-m-d')."'"); 
            
            if (! is_null($payee))
            {
                if ($payee) $qb->AndWhere("facture.payele IS NOT NULL"); 
                else $qb->AndWhere("facture.payele IS NULL"); 
            }
            if (! is_null($renouvellement))
            {
                if ($renouvellement) $qb->AndWhere("facturePrestas.renouvellement = 1"); 
                else $qb->AndWhere(" facturePrestas.renouvellement = 0"); 
            }
            
            return $qb->getQuery()->getOneOrNullResult();
	}   
        
    	public function findSommePayeeStillDate($dateFin,$renouvellement=null) 
        {
            // OBOSLETE ????
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->Where("facture.dateEmission < '".$dateFin->format('Y-m-d')."'"); 
            $qb->AndWhere("facture.payele IS NOT NULL"); 
            return $qb->getQuery()->getOneOrNullResult();
	}   
        
        
        public function SommeFacturee() 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            $qb->Where("facture.finalise=1"); 
            $qb->Select('SUM(facturePrestas.montant) as total ');
            return $qb->getQuery()->getOneOrNullResult();
	} 
        
        
        
        
        
        

    	public function findSommeFactureeNonPayeBetweenDate($dateDebut,$dateFin) 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->Where("facture.finalise=1 and facture.dateEmission < '".$dateFin->format('Y-m-d')."' AND facture.dateEmission >='".$dateDebut->format('Y-m-d')."'"); 
            $qb->AndWhere("facture.payele IS NULL"); 
            return $qb->getQuery()->getOneOrNullResult();
	}   
         

        
        
        

    	public function findSommeFactureePayeBetweenDate($dateDebut,$dateFin) 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->Where("facture.finalise=1 and facture.dateEmission < '".$dateFin->format('Y-m-d')."' AND facture.dateEmission >='".$dateDebut->format('Y-m-d')."'"); 
            $qb->AndWhere("facture.payele IS NOT NULL"); 
            return $qb->getQuery()->getOneOrNullResult();
	}   
         

        
        

    	public function findSommeFactureeBetweenDate($dateDebut,$dateFin) 
        {
            $qb = $this->createQueryBuilder('facturePrestas');
            $qb->Join('facturePrestas.facture', 'facture');
            $qb->Select('SUM(facturePrestas.montant) as total ');
            $qb->Where("facture.finalise=1 and facture.dateEmission < '".$dateFin->format('Y-m-d')."' AND facture.dateEmission >='".$dateDebut->format('Y-m-d')."'"); 
            return $qb->getQuery()->getOneOrNullResult();
	}   
         

        
        
     

}
