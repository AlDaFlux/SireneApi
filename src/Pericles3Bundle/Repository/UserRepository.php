<?php

namespace Pericles3Bundle\Repository;


use \Pericles3Bundle\Entity\Creai;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    
    
       	public function FindByType($type) 
        {
            $qb = $this->createQueryBuilder('user');
            if ($type=='admin') $qb->where("user.etablissement IS NULL AND user.gestionnaire IS NULL");
            if ($type=='etablissement') $qb->where("user.etablissement IS NOT NULL");
            if ($type=='gestionnaire') $qb->where("user.gestionnaire IS NOT NULL");
            return $qb->getQuery()->getResult();
        }
        
       	public function FindByCreaiType($creai,$type) 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->LeftJoin('user.etablissement', 'etablissement');
            $qb->LeftJoin('user.gestionnaire', 'gestionnaire');
            $where=$this->GetClauseWhereCreai($creai);
            if ($type=='admin') $qb->where($where."AND user.etablissement IS NULL AND user.gestionnaire IS NULL");
            if ($type=='etablissement') $qb->where($where."AND user.etablissement IS NOT NULL");
            if ($type=='gestionnaire') $qb->where($where."AND user.gestionnaire IS NOT NULL");
            return $qb->getQuery()->getResult();
        }
        
        
        public function GetClauseWhereCreai($creai)
        {
            return("(user.creai=".$creai->GetId()."  OR etablissement.creai = ".$creai->GetId()." OR gestionnaire.creai=".$creai->GetId().")");
        }
        
        
   	public function FindByCreai($creai) 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->LeftJoin('user.etablissement', 'etablissement');
            $qb->LeftJoin('user.gestionnaire', 'gestionnaire');
            $where=$this->GetClauseWhereCreai($creai);
            $qb->where($where);
            return $qb->getQuery()->getResult();
        }
        
   	public function ListCTCreai() 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->where("user.desactive=0 AND user.creai>0");
            
            return $qb->getQuery()->getResult();
        }
   	public function ListCTByCreai(Creai $creai) 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->Join('user.creai', 'creai');
            $qb->where("creai.id=".$creai->getId());
            return $qb->getQuery()->getResult();
        }
        
        
        
   	public function ListCTCreaiRef() 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->Join('user.ReferentielsPublic', 'referentiel');
            return $qb->getQuery()->getResult();
        }
         
        
       	public function FindByGestionnaireAll($User) 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->LeftJoin('user.etablissement', 'etablissement');
            if ($User->getIsAdminPole())
              {
                  $qb->Join('etablissement.userPole', 'userPole');
                  $qb->where(' userPole.id = :user_id')->setParameter('user_id', $User->getId());
              }
              else
              {
                    $qb->where("user.gestionnaire  = :gestionnaire_id  OR etablissement.gestionnaire = :gestionnaire_id ");
                    $qb->setParameter('gestionnaire_id', $User->GetGestionnaire()->getId());              
              }
            return $qb->getQuery()->getResult();
        }
        
        public function FindByGestionnaireType($gestionnaire,$type) 
        {
            $qb = $this->createQueryBuilder('user');
            $qb->LeftJoin('user.etablissement', 'etablissement');
            if ($type=='etablissement')
            {
                $qb->where("etablissement.gestionnaire = :gestionnaire_id ");
            }
            else
            {
                $qb->where("user.gestionnaire  = :gestionnaire_id");
            }
            $qb->setParameter('gestionnaire_id', $gestionnaire->getId());
            return $qb->getQuery()->getResult();
        }
        
        
    public function findLastCreated($limit = 5) 
    {
        $qb = $this->createQueryBuilder('users');
        $qb->orderBy("users.dateCreate", 'DESC');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
    public function findLastConnected($limit = 5) 
    {
        $qb = $this->createQueryBuilder('users');
        $qb->orderBy("users.dateLastConnect", 'DESC');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
           
    public function findLastCreatedCreai($creai,$limit = 5) 
    {
        $qb = $this->createQueryBuilder('user');
        $qb->LeftJoin('user.etablissement', 'etablissement');
        $qb->LeftJoin('user.gestionnaire', 'gestionnaire');
        $qb->where($this->GetClauseWhereCreai($creai));
        $qb->orderBy("user.dateCreate", 'DESC');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
    public function findLastConnectedCreai($creai,$limit = 5) 
    {
        $qb = $this->createQueryBuilder('user');
        $qb->LeftJoin('user.etablissement', 'etablissement');
        $qb->LeftJoin('user.gestionnaire', 'gestionnaire');
        $qb->where($this->GetClauseWhereCreai($creai));
        $qb->orderBy("user.dateLastConnect", 'DESC');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
            
    public function nbParMail($email) 
    {
        $qb = $this->createQueryBuilder('users');
        $qb->select('count(users.id)');
        $qb->where("users.email=:aaa");
        $qb->setParameter('aaa', $email);
        return($qb->getQuery()->getSingleScalarResult());
    }
    
    
    public function FindByOccurence($occurence,$creai=null) 
    {
            $qb = $this->createQueryBuilder('user');
            $qb->LeftJoin('user.etablissement', 'etablissement');
            $qb->LeftJoin('user.gestionnaire', 'gestionnaire');
            $qb->where("user.email LIKE :occurence OR user.username LIKE :occurence ");
            if ($creai)
            {
                $where=$this->GetClauseWhereCreai($creai);
                $qb->andWhere($where);
            }
            $qb->setParameter('occurence',"%".$occurence."%");
            return $qb->getQuery()->getResult();
    }

        
    public function FindByEtablissement(\Pericles3Bundle\Entity\Etablissement $etablissement) 
    {
            $qb = $this->createQueryBuilder('user');
            $qb->Join('user.etablissement', 'etablissement');
            $qb->where("etablissement.id = ".$etablissement->GetId());
            return $qb->getQuery()->getResult();
    }

        

        
        
        
}
