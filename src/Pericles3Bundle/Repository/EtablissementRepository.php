<?php

namespace Pericles3Bundle\Repository;

use Pericles3Bundle\Entity\User;
use Pericles3Bundle\Entity\Gestionnaire;
use \Pericles3Bundle\Entity\Creai;



/**
 * EtablissementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtablissementRepository extends \Doctrine\ORM\EntityRepository
{
    public function findLastCreated($limit = 5) 
    {
        $qb = $this->createQueryBuilder('etablissements');
        $qb->orderBy("etablissements.CreatedDate", 'DESC');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
    public function findFirstCreated($limit = 5) 
    {
        $qb = $this->createQueryBuilder('etablissements');
        $qb->orderBy("etablissements.CreatedDate");
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
    public function findLastCreatedCreai($creai,$limit = 5) 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Where("etablissement.creai = ".$creai->GetId());
        $qb->orderBy("etablissement.CreatedDate", 'DESC');
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
    
    
     
    public function findSansCreai() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Where("etablissement.creai IS NULL");
        return $qb->getQuery()->getResult();
    }
    
    
    public function findNbReelSansCreai() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->select('count(etablissement.id)');
        $qb->Join('etablissement.category', 'category');
        $qb->where('category.reel!=0');
        $qb->AndWhere("etablissement.creai IS NULL");
        return($qb->getQuery()->getSingleScalarResult());    
    }
    
            
           
    
    
    public function findCacheAFaire($limit = 20) 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Where("etablissement.sizeTotalFileUploadCache = -1");
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }
        
    public function findReels() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->where('category.reel!=0');
        return $qb->getQuery()->getResult();
    }
    
    public function findReelsParModeCotisation(\Pericles3Bundle\Entity\ModeCotisation $ModeCotisation) 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->Join('etablissement.modeCotisation', 'modeCotisation');
        $qb->where('category.reel!=0 and modeCotisation.id='.$ModeCotisation->getId());
        return $qb->getQuery()->getResult();
    }
    
    public function findReelsParModeStockage(\Pericles3Bundle\Entity\StockageEtablissement $stockage) 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->Join('etablissement.StockageEtablissement', 'stockage');
        $qb->where('category.reel!=0 and stockage.id='.$stockage->getId());
        return $qb->getQuery()->getResult();
    }
    
    
    
    public function findPericlesSansPericles() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->Join('etablissement.modeCotisation', 'modeCotisation');
        $qb->LeftJoin('etablissement.pericles', 'pericles');
        $qb->where('modeCotisation.id=3 AND pericles.id IS NULL');
        return $qb->getQuery()->getResult();
    }
    
    
    
    
        
    public function findNotReels() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->where('category.reel=0');
        return $qb->getQuery()->getResult();
    }
        
    public function findNotReelsByCreai($creai) 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->Join('etablissement.creai', 'creai');
        $qb->where('category.reel=0 and creai.id='.$creai->GetId());
        return $qb->getQuery()->getResult();
    }
    
     
    
        
    public function findReelsSansFiness() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->where('category.reel=1 AND etablissement.finess IS NULL ');
        return $qb->getQuery()->getResult();
    }
    
    
    public function findFinessParCategorie(\Pericles3Bundle\Entity\FinessCategorie $finessCategorie) 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->Join('etablissement.finess', 'finess');
        $qb->where('category.reel=1 AND finess.codeCategorie ='.$finessCategorie->getId());
        return $qb->getQuery()->getResult();
    }
    
    
    
    
    
        
    public function findReelsSansFacture() 
    {
        
        $etablissement_facture = $this->createQueryBuilder('etablissement_facture')
            ->select(['etablissement_facture.id'])  
            ->InnerJoin('etablissement_facture.facturePrestas', 'facturePrestas_s')
            ->InnerJoin('facturePrestas_s.facture', 'facture_s')
            ->AndWhere('facture_s.finalise=1');
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->Join('etablissement.referentielPublic', 'referentielPublic');
        $qb->LeftJoin('etablissement.facturePrestas', 'facturePrestas');
        $qb->LeftJoin('facturePrestas.facture', 'facture');
        $qb->where('etablissement.modeCotisation<>13 AND  category.reel=1 AND referentielPublic.id<>32  ');
        $qb->AndWhere($qb->expr()->notIn('etablissement.id', $etablissement_facture->getDQL()));
        $qb->AndWhere('facturePrestas.id IS NULL or facture.finalise<>1');
        return $qb->getQuery()->getResult();
    }

    
    
    
    
    
    public function findTestAvecFature() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->LeftJoin('etablissement.facturePrestas', 'facturePrestas');
        $qb->where('category.reel=0  AND facturePrestas.id IS NOT NULL ');
        return $qb->getQuery()->getResult();
    }

    
    
    
    public function findWithLastFacture() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Select('etablissement.nom, max(facture.numFacture) as numFacture, max(facture.dateEmission) as dateEmission');
        $qb->Join('etablissement.facturePrestas', 'facturePrestas');
        $qb->Join('facturePrestas.facture', 'facture');

        $qb->Join('etablissement.category', 'category');
        $qb->where("category.reel=1"); 

        $qb->groupBy('etablissement.nom');
        $qb->having("dateEmission < '". date('Y-m-d',strtotime(date("Y-m-d", mktime()) . " - 365 day"))."'");
        return $qb->getQuery()->getResult();
    }
    
    
    
    
    
    public function findWithFactureImpayee() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->LeftJoin('etablissement.facturePrestas', 'facturePrestas');
        $qb->LeftJoin('facturePrestas.facture', 'facture');
        $qb->Join('etablissement.modeCotisation', 'modeCotisation');
        $qb->where('modeCotisation.id<>13');
        $qb->andWhere('facture.numFacture  IS NOT NULL AND facture.payele  IS  NULL');
        return $qb->getQuery()->getResult();
    }
    
    
    
    public function findReelsSansDepartement() 
    {
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.category', 'category');
        $qb->where('category.reel=1 AND etablissement.departement IS NULL ');
        return $qb->getQuery()->getResult();
    }
    
 
    
    public function findEtablissementParGestionnaire(Gestionnaire $Gestionnaire) 
    {
        // non utilisé !! 
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.gestionnaire', 'gestionnaire');
        $qb->where('gestionnaire = :gestionnaire_id')->setParameter('gestionnaire_id', $Gestionnaire->getId());
        return $qb->getQuery()->getResult();
    }
    
    public function findEtablissementParPole(User $User) 
    {
        // non utilisé !! 
        $qb = $this->createQueryBuilder('etablissement');
        $qb->Join('etablissement.userPole', 'userPole');
        $qb->where('userPole.id = :user_id')->setParameter('user_id', $User->getId());
        return $qb->getQuery()->getResult();
    }
    
    
    
    public function synteseEtablissementParGestionnaire(Gestionnaire $Gestionnaire) 
    {
        // non utilisé !! 
        $champs=" etablissement.id, etablissement.nom,etablissement.GetNbQuestionsRepondues ";
        $qb = $this->createQueryBuilder('etablissement');
        $qb->select($champs.', count(questions.id) as nb');
        $qb->Join('etablissement.gestionnaire', 'gestionnaire');
        $qb->Join('etablissement.domaines', 'domaines');
        $qb->Join('domaines.dimensions', 'dimensions');
        $qb->Join('dimensions.criteres', 'criteres');
        $qb->Join('criteres.questions', 'questions');
        $qb->groupBy($champs);
        $qb->where('gestionnaire = :gestionnaire_id')->setParameter('gestionnaire_id', $Gestionnaire->getId());
        return $qb->getQuery()->getResult();
    }
    
    
          
        public function findLike($occurence) 
        {
            $qb = $this->createQueryBuilder('etablissement');
            $qb->LeftJoin('etablissement.finess', 'finess');
            $qb->where("etablissement.nom LIKE :occurence OR finess.codeFiness LIKE :occurence")->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(20);
            return $qb->getQuery()->getResult();
        }
        
        
        
        public function FindByOccurence($occurence,$creai=null) 
        {
            $qb = $this->createQueryBuilder('etablissement');
            $qb->LeftJoin('etablissement.finess', 'finess');
            $qb->where("etablissement.nom LIKE :occurence OR finess.codeFiness LIKE :occurence");
            if ($creai)
            {
                $qb->Join('etablissement.creai', 'creai');
                $qb->andWhere("creai.id=".$creai->GetId());
            }
            $qb->setParameter('occurence',"%".$occurence."%");
            return $qb->getQuery()->getResult();
        }
        

        public function FindWithReferentielDesuet() 
        {
            $qb = $this->createQueryBuilder('etablissement');
            $qb->Join('etablissement.referentielPublic', 'referentielPublic');
            $qb->Join('etablissement.domaines', 'domaine_etablissement');
            $qb->Join('domaine_etablissement.referentiel', 'domaine_referentiel');
            $qb->Join('domaine_referentiel.ReferentielPublic', 'domaine_referentielPublic');
            $qb->where("referentielPublic.id <> domaine_referentielPublic.id");
            return $qb->getQuery()->getResult();
        }
            
        
        public function FindByrefExterne(\Pericles3Bundle\Entity\ReferentielExterne $refexterne) 
        {
            $qb = $this->createQueryBuilder('etablissement');
            $qb->Join('etablissement.referentielPublic', 'referentielPublic');
            $qb->Join('referentielPublic.referentielExterne', 'referentielExterne');
            $qb->where("referentielExterne.id = ".$refexterne->getId());
            return $qb->getQuery()->getResult();
        }
        
     	public function findFiniWithRefExterne() 
        {
            $qb = $this->createQueryBuilder('etablissement');
            $qb->Join('etablissement.referentielPublic', 'referentielPublic');
            $qb->Join('referentielPublic.referentielExterne', 'ReferentielExterne');
            $qb->where("ReferentielExterne.id is not null");
            $qb->andWhere("referentielPublic.fini=1");
            return $qb->getQuery()->getResult();
        }
        
    
    
}
