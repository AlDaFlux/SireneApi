<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

namespace Pericles3Bundle\Repository;
use Pericles3Bundle\Entity\Etablissement;
use Pericles3Bundle\Entity\Gestionnaire;


/**
 * PisteAmeliorationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DomaineObjectifStrategiqueRepository extends \Doctrine\ORM\EntityRepository
{

	public function findByEtablissement(Etablissement $etablissement) 
        {
		$qb = $this->createQueryBuilder('dosa');
		$qb->where('dosa.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId());
		return $qb->getQuery()->getResult();
                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
	}
        
        public function findByGestionnaire(\Pericles3Bundle\Entity\User $User) 
        {
		$qb = $this->createQueryBuilder('dosa');
                $qb->Join('dosa.etablissement', 'etablissement');
                $qb->Join('etablissement.gestionnaire', 'gestionnaire');
                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->where('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->where("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
		return $qb->getQuery()->getResult();
                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
	}
        
        
        
            
        public function findByGestionnaireReferentiel(\Pericles3Bundle\Entity\User $User, \Pericles3Bundle\Entity\Referentiel $referentiel) 
        {
		$qb = $this->createQueryBuilder('dosa');
                $qb->Join('dosa.domaine', 'domaine');
                $qb->Join('domaine.referentiel', 'referentiel');
                $qb->Join('dosa.etablissement', 'etablissement');
                $qb->Join('etablissement.gestionnaire', 'gestionnaire');
                if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->where('userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->where("etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
                      $qb->andWhere("referentiel.id= :ref_id")->setParameter('ref_id', $referentiel->getId());
                  
                //$qb->setMaxResults(1);
		return $qb->getQuery()->getResult();
	}
        
        
        
        
        
        public function findStatutGestionnaire(\Pericles3Bundle\Entity\User $User,$statut_id) 
        {
		$qb = $this->createQueryBuilder('dosa');
                $qb->Join('dosa.etablissement', 'etablissement');
                 if ($User->getIsAdminPole())
                  {
                      $qb->Join('etablissement.userPole', 'userPole');
                      $qb->where('dosa.statut = :staid AND userPole.id = :user_id')->setParameter('user_id', $User->getId());
                  }
                  else
                  {
                      $qb->where("dosa.statut = :staid AND etablissement.gestionnaire = :gestionnaire_id")->setParameter('gestionnaire_id', $User->getGestionnaire()->getId());
                  }
		$qb->setParameter('staid', $statut_id);
                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
		return $qb->getQuery()->getResult();
	}

        
        
        
        public function findStatut(Etablissement $etablissement,$statut_id) 
        {
		$qb = $this->createQueryBuilder('dosa');
		$qb->where('domaine.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId());
		$qb->where('dosa.statut = :staid AND dosa.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId())->setParameter('staid', $statut_id);
                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
		return $qb->getQuery()->getResult();
	}
        
        
        
        
        public function findDomaine($id) 
        {
		$qb = $this->createQueryBuilder('dosa');
                $qb->where('dosa.domaine = :id')->setParameter('id', $id);
//		$qb->where('dosa.domaine = :id AND dosa.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId())->setParameter('id', $id);
                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
		return $qb->getQuery()->getResult();
	}

        
        public function findImportantes(Etablissement $etablissement,$limit=5) 
        {
		$qb = $this->createQueryBuilder('dosa');
		$qb->where('dosa.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId());
                $qb->setMaxResults($limit);
                $qb->orderBy('dosa.statut DESC, dosa.dateEcheance');
		return $qb->getQuery()->getResult();
	}

                
        public function findDerniers(Etablissement $etablissement,$limit=5) 
        {
		$qb = $this->createQueryBuilder('dosa');
		$qb->where('dosa.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId());
                $qb->setMaxResults($limit);
                $qb->orderBy('dosa.dateCreate','DESC');
		return $qb->getQuery()->getResult();
	}
        

        
        
        
          
        
        public function FindByEtablissementOccurence($etablissement,$occurence) 
        {
            $qb = $this->createQueryBuilder('osa');
            $qb->select(array('osa.commentaire as lib','osa.id as id','\'paq_osa_show\' as path'));
            $qb->Join('osa.domaine', 'domaines');
            $qb->where("osa.commentaire LIKE :occurence  AND domaines.etablissement = :etablissement_id")->setParameter('etablissement_id', $etablissement->getId())->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(25);
            return $qb->getQuery()->getResult();
        }
        
        
         
        
 
        
        public function FindReferentielDesuet() 
        {
            $qb = $this->createQueryBuilder('osa');
            $qb->Join('osa.etablissement', 'osa_etablissement');
            $qb->Join('osa_etablissement.referentielPublic', 'osa_referentielPublic');
            $qb->Join('osa.domaine', 'domaines');
            $qb->Join('domaines.referentiel', 'domaine_referentiel');
            $qb->Join('domaine_referentiel.ReferentielPublic', 'domaine_referentielPublic');
            $qb->where("domaine_referentielPublic.id <> osa_referentielPublic.id");
            return $qb->getQuery()->getResult();
        }
        
        
        
        
        
}