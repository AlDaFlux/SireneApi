<?php

namespace Pericles3Bundle\Repository;

use Pericles3Bundle\Entity\DemandeGestionnaire;


/**
 * DemandeEtablissementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemandeGestionnaireRepository extends \Doctrine\ORM\EntityRepository
{ 
          
                
        public function findNonFiniNb() 
        {
            $qb = $this->createQueryBuilder('demandes');
            $qb->select('count(demandes.id)');
            $qb->where("demandes.etat<>3");
            $qb->andWhere("demandes.etat<>0");
            return($qb->getQuery()->getSingleScalarResult());
        }
      
        public function findNonFini() 
        {
            $qb = $this->createQueryBuilder('demandes');
            $qb->where("demandes.etat<>3");
            $qb->andWhere("demandes.etat<>0");
            return $qb->getQuery()->getResult();
        }
           
     public function findNonDevis() 
        {
            $qb = $this->createQueryBuilder('demandes');
            $qb->Where("demandes.etat<>0");
            return $qb->getQuery()->getResult();
        }
  
        public function findFini($limit=0) 
        {
            
            $qb = $this->createQueryBuilder('demandes');
            $qb->where("demandes.etat=3");
            if ($limit) $qb->setMaxResults($limit);
            $qb->orderBy('demandes.dateDemande', 'DESC');

            
            return $qb->getQuery()->getResult();
        }
     
                     
        public function findATraiterNb() 
        {
            $qb = $this->createQueryBuilder('demandes');
            $qb->select('count(demandes.id)');
            $qb->where("demandes.etat=1");
            return($qb->getQuery()->getSingleScalarResult());
        }
        

             
    public function nbParMail($email) 
    {
        $qb = $this->createQueryBuilder('demandes');
        $qb->select('count(demandes.id)');
        $qb->where("demandes.email=:aaa");
        $qb->setParameter('aaa', $email);
        return($qb->getQuery()->getSingleScalarResult());
    }
    
        
}
