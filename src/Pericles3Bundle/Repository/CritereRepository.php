<?php

namespace Pericles3Bundle\Repository;

use Pericles3Bundle\Entity\BibliothequeAncreai;
use Pericles3Bundle\Entity\Dimension;
use Pericles3Bundle\Entity\Domaine;
use Pericles3Bundle\Entity\Etablissement;
/**
 * CritereRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CritereRepository extends \Doctrine\ORM\EntityRepository
{
    
    
	public function findByDimension(Dimension $dimension, $orderBy = null) {
		$qb = $this->createQueryBuilder('d');
		$qb->Join('d.referentiel', 'referentiel');
		$qb->where('d.dimension = :dimension_id')->setParameter('dimension_id', $dimension->getId());
		if (isset($orderBy))
			$qb->orderBy($orderBy);
		return $qb->getQuery()->getResult();
	}
        
        public function findByDomaineId($domaine_id, $orderBy = null) {

                $qb = $this->createQueryBuilder('critere');
		$qb->Join('critere.referentiel', 'referentielCritere');
		$qb->Join('critere.dimension', 'dimension');
		$qb->Join('dimension.referentiel', 'referentielDimension');
		$qb->Join('dimension.domaine', 'domaine');
		$qb->Join('domaine.referentiel', 'referentielDomaine');
		$qb->where('domaine.id = :domaine_id')->setParameter('domaine_id', $domaine_id);
                
            	if (isset($orderBy))
			$qb->orderBy($orderBy);
		else {
			$qb->orderBy('referentielDomaine.ordre, referentielDimension.ordre, referentielCritere.ordre');
		}
                return $qb->getQuery()->getResult();
	}
	
	public function findByEtablissement(Etablissement $etablissement, $orderBy = null) {
		$qb = $this->createQueryBuilder('critere');
		$qb->Join('critere.referentiel', 'referentielCritere');
		$qb->Join('critere.dimension', 'dimension');
		$qb->Join('dimension.referentiel', 'referentielDimension');
		$qb->Join('dimension.domaine', 'domaine');
		$qb->Join('domaine.etablissement', 'etablissement');
		$qb->Join('etablissement.referentielPublic', 'vraiReferentielPublic');
		$qb->Join('domaine.referentiel', 'referentielDomaine');
		$qb->Join('referentielDomaine.ReferentielPublic', 'referentielPublicDomaine');
                                
		$qb->where('domaine.etablissement = :etablissement_id')->setParameter('etablissement_id', $etablissement->getId());
		$qb->andWhere('vraiReferentielPublic.id=referentielPublicDomaine.id');
		if (isset($orderBy))
			$qb->orderBy($orderBy);
		else {
			$qb->orderBy('referentielDomaine.ordre, referentielDimension.ordre, referentielCritere.ordre');
		}
		return $qb->getQuery()->getResult();
	}
        
        
        public function findByNote(Etablissement $etablissement,$notemin=1,$notemax=3) 
        {
		$qb = $this->createQueryBuilder('critere');
		$qb->Join('critere.referentiel', 'referentielCritere');
		$qb->Join('critere.dimension', 'dimension');
		$qb->Join('dimension.referentiel', 'referentielDimension');
		$qb->Join('dimension.domaine', 'domaine');
		$qb->Join('domaine.referentiel', 'referentielDomaine');
		$qb->where('critere.note>= :notemin AND critere.note<= :notemax AND domaine.etablissement = :etablissement_id');
                $qb->setParameter('etablissement_id', $etablissement->getId());
                $qb->setParameter('notemin', $notemin);
                $qb->setParameter('notemax', $notemax);
                
                $qb->orderBy('referentielDomaine.ordre, referentielDimension.ordre, referentielCritere.ordre');
		return $qb->getQuery()->getResult();
	}
          public function findByNoteDomaine(Domaine $Domaine,$notemin=1,$notemax=3) 
        {
		$qb = $this->createQueryBuilder('critere');
		$qb->Join('critere.referentiel', 'referentielCritere');
		$qb->Join('critere.dimension', 'dimension');
		$qb->Join('dimension.referentiel', 'referentielDimension');
		$qb->Join('dimension.domaine', 'domaine');
		$qb->Join('domaine.referentiel', 'referentielDomaine');
		$qb->where('critere.note>= :notemin AND critere.note<= :notemax AND domaine.id = :domaine_id');
                $qb->setParameter('domaine_id', $Domaine->getId());
                $qb->setParameter('notemin', $notemin);
                $qb->setParameter('notemax', $notemax);
                
                $qb->orderBy('referentielDomaine.ordre, referentielDimension.ordre, referentielCritere.ordre');
		return $qb->getQuery()->getResult();
	}
        
        
        public function findPointFaibles(Etablissement $etablissement) 
        {
		return $this->findByNote($etablissement,1,3) ;
	}
        
        public function findPointFaiblesDomaine(Domaine $Domaine) 
        {
		return $this->findByNoteDomaine($Domaine,1,3) ;
	}
        
        public function findPointFortsDomaine(Domaine $Domaine) 
        {
		return $this->findByNoteDomaine($Domaine,8,10) ;
	}
        
        
            
        
        public function findByRbppEtablissement(Etablissement $Etablissement,  BibliothequeAncreai $RBPP) 
        {
		$qb = $this->createQueryBuilder('critere');
         	$qb->Join('critere.referentiel', 'referentiel');
		$qb->Join('critere.dimension', 'dimension');
		$qb->Join('dimension.domaine', 'domaine');
		$qb->Join('referentiel.RBPP', 'RBPP');
                $qb->where('domaine.etablissement = :etablissement_id');
                $qb->AndWhere('RBPP.id = :rbpp');
                $qb->setParameter('etablissement_id', $Etablissement->getId());
                $qb->setParameter('rbpp', $RBPP->getId());
 		return $qb->getQuery()->getResult();
	}
        
        
        
        
}
