<?php

namespace Pericles3Bundle\Repository;

/**
 * GestionnaireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GestionnaireRepository extends \Doctrine\ORM\EntityRepository
{
        public function findAll() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->OrderBy("gestionnaire.nom");
            return $qb->getQuery()->getResult();
        }
        
        public function findReels() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->Where("gestionnaire.category = 1");
            $qb->OrderBy("gestionnaire.nom");
            return $qb->getQuery()->getResult();
        }
        
        
        public function findByCreai(\Pericles3Bundle\Entity\Creai $creai) 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->Where("gestionnaire.category = 1");
            $qb->AndWhere("gestionnaire.creai = ".$creai->GetId());
            $qb->OrderBy("gestionnaire.nom");
            return $qb->getQuery()->getResult();
        }
        
        
        
        
         public function findNonActive() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->Where("gestionnaire.category = 2");
            $qb->OrderBy("gestionnaire.nom");
            return $qb->getQuery()->getResult();
        }
        
         public function findTest() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->Where("gestionnaire.category = 3");
            $qb->OrderBy("gestionnaire.nom");
            return $qb->getQuery()->getResult();
        }
        
        
          
        public function findLike($occurence) 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->where("gestionnaire.nom LIKE :occurence")->setParameter('occurence',"%".$occurence."%");
            $qb->setMaxResults(20);
            return $qb->getQuery()->getResult();
        }
        
        public function findSansFacture() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->LeftJoin("gestionnaire.facturePrestas","facturePrestas");
            $qb->where("facturePrestas.id IS NULL");
            $qb->andWhere("gestionnaire.category = 1");
            return $qb->getQuery()->getResult();
        }
        
        
        public function findSansFiness() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->where("gestionnaire.finess IS NULL");
            $qb->andWhere("gestionnaire.category = 1");
            return $qb->getQuery()->getResult();
        }
        
        
        
        
        public function findSansFactureWarning() 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->LeftJoin("gestionnaire.facturePrestas","facturePrestas");
            $qb->where("facturePrestas.id IS NULL");
            $qb->AndWhere("gestionnaire.category = 1");
            return $qb->getQuery()->getResult();
        }
        
        
        public function FindByOccurence($occurence,$creai=null) 
        {
            $qb = $this->createQueryBuilder('gestionnaire');
            $qb->LeftJoin('gestionnaire.finess', 'finess');
            $qb->where("gestionnaire.nom LIKE :occurence OR finess.codeFiness LIKE :occurence");
            if ($creai)
            {
                $qb->Join('gestionnaire.creai', 'creai');
                $qb->andWhere("creai.id=".$creai->GetId());
            }
            $qb->setParameter('occurence',"%".$occurence."%");
            return $qb->getQuery()->getResult();
        }

        
        
    
    
    public function findNbReelSansCreai() 
    {
        $qb = $this->createQueryBuilder('gestionnaire');
        $qb->select('COUNT(gestionnaire.id)');
        $qb->Join('gestionnaire.category', 'category');
        $qb->where('gestionnaire.category=1');
        $qb->AndWhere("gestionnaire.creai IS NULL");
        return($qb->getQuery()->getSingleScalarResult());    
    }
    
        
        
}
